/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cliente;


import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import servidor.InterfazServidor;


public class PizarraCliente extends javax.swing.JFrame{
    //Las variables est√°n al final
    
    public PizarraCliente() {
        menuClick.setDefaultLightWeightPopupEnabled( false );
        initComponents();
        
        grosor=10;
        btnDesconectar.setEnabled(false);
        String ip= getIPv4InetAddress();
        txtIp.setText(ip.substring(0, ip.lastIndexOf('.')+1));
        //hilo= new EscuchadorPizarra(this);
        setLocationRelativeTo(null);
        dialogoCoordenada.setLocationRelativeTo(null);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
       
        dialogoCoordenada.setModal(true);
        
        c.addMouseMotionListener(new Pintador());
        MouseAdapter m= new MouseAdapter() {
            
            /*Variaciones de menu contextual, algunos sistemas operativos 
            difieren en la utilizacion de estos metodos*/
            @Override
            public void mousePressed(MouseEvent e) {
                if(e.isPopupTrigger()){
                    menuClick.show(e.getComponent(), e.getX(), e.getY());
                 
                }
            
            }
      
            @Override
            public void mouseReleased(MouseEvent e) {
                 if(e.isPopupTrigger()){
                     menuClick.show(e.getComponent(), e.getX(), e.getY());
           
                }
            }
};
        this.addMouseListener(m);
       c.addMouseListener(m);
      
        System.out.println("Cliente inicia..");
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuClick = new javax.swing.JPopupMenu();
        opcCoordenadas = new javax.swing.JMenuItem();
        opcGrosorPincel = new javax.swing.JMenuItem();
        dialogoCoordenada = new javax.swing.JDialog(this, true);
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtX = new javax.swing.JTextField();
        txtY = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        c = new java.awt.Canvas();
        btnSalir = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();
        btnDesconectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIp = new javax.swing.JTextField();

        opcCoordenadas.setText("Enviar Coordenada personalizada");
        opcCoordenadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcCoordenadasActionPerformed(evt);
            }
        });
        menuClick.add(opcCoordenadas);

        opcGrosorPincel.setText("Cambiar Grosor de pincel");
        opcGrosorPincel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcGrosorPincelActionPerformed(evt);
            }
        });
        menuClick.add(opcGrosorPincel);

        dialogoCoordenada.setAlwaysOnTop(true);
        dialogoCoordenada.setMinimumSize(new java.awt.Dimension(237, 131));
        dialogoCoordenada.setModal(true);
        dialogoCoordenada.setResizable(false);
        dialogoCoordenada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dialogoCoordenadaMouseClicked(evt);
            }
        });

        jLabel2.setText("X");

        jLabel3.setText("Y");

        txtY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYActionPerformed(evt);
            }
        });
        txtY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtYKeyPressed(evt);
            }
        });

        btnEnviar.setText("Enviar Punto");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogoCoordenadaLayout = new javax.swing.GroupLayout(dialogoCoordenada.getContentPane());
        dialogoCoordenada.getContentPane().setLayout(dialogoCoordenadaLayout);
        dialogoCoordenadaLayout.setHorizontalGroup(
            dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogoCoordenadaLayout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogoCoordenadaLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnEnviar))
                    .addGroup(dialogoCoordenadaLayout.createSequentialGroup()
                        .addGroup(dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtX, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(53, 53, 53))
        );
        dialogoCoordenadaLayout.setVerticalGroup(
            dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogoCoordenadaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogoCoordenadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEnviar)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        c.setBackground(new java.awt.Color(53, 145, 65));
        c.setForeground(java.awt.Color.white);

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        btnDesconectar.setText("Desconectar");
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });

        jLabel1.setText("IP del Servidor:");

        txtIp.setText("jTextField1");
        txtIp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIpKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConectar)
                        .addGap(7, 7, 7)
                        .addComponent(btnDesconectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir))
                    .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnConectar)
                    .addComponent(btnDesconectar)
                    .addComponent(jLabel1)
                    .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        if(conectado)
            desconectar();
        System.exit(0);
        
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        // TODO add your handling code here:
        conectar();
    
    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarActionPerformed
        desconectar();
        btnConectar.setEnabled(true);
        txtIp.setEnabled(true);
        btnDesconectar.setEnabled(false);
    }//GEN-LAST:event_btnDesconectarActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        dialogoCoordenada.setVisible(false);
        try {
             if(conectado)
            impl.procesarPunto(Integer.parseInt(txtX.getText()), Integer.parseInt(txtY.getText()));
        } catch (RemoteException ex) {
            try {
                registry.unbind("Cliente");
            } catch (RemoteException ex1) {
                Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex1);
            } catch (NotBoundException ex1) {
                Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex1);
            }
            conectado=false;
            JOptionPane.showMessageDialog(null, "Error en la conexi√≥n..");
            txtIp.setEnabled(true);
            btnConectar.setEnabled(true);
            btnDesconectar.setEnabled(false);
        }catch(java.lang.NumberFormatException e){
            
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void dialogoCoordenadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dialogoCoordenadaMouseClicked
        
    }//GEN-LAST:event_dialogoCoordenadaMouseClicked

    private void txtYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYActionPerformed
        
    }//GEN-LAST:event_txtYActionPerformed

    private void opcCoordenadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcCoordenadasActionPerformed
        
        dialogoCoordenada.setVisible(true);
        txtX.setText(null);
        txtY.setText(null);
        txtX.grabFocus();
    }//GEN-LAST:event_opcCoordenadasActionPerformed

    private void opcGrosorPincelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcGrosorPincelActionPerformed
        int n= JOptionPane.showConfirmDialog(null, "La operaci√≥n Implica reconectar al servidor. ¬øDesea continuar?", "Advertencia", JOptionPane.YES_NO_OPTION);
        if(n== JOptionPane.YES_OPTION){
            try{
                n= Integer.parseInt(JOptionPane.showInputDialog("Ingrese grosor del pincel: "));
                grosor= n;
                desconectar();
                conectar();
            }catch(Exception e){
                
            }
                
        }
    }//GEN-LAST:event_opcGrosorPincelActionPerformed

    private void txtYKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYKeyPressed
       presionarEnter(txtY,evt);
    }//GEN-LAST:event_txtYKeyPressed

    private void txtIpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIpKeyPressed
        presionarEnter(txtIp, evt);
    }//GEN-LAST:event_txtIpKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PizarraCliente().setVisible(true);
                
            }
        });
    }

    private void presionarEnter(JTextField b, KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            try {

                if (b == txtY) {
                    dialogoCoordenada.setVisible(false);
                    try {
                        if (conectado) {
                            impl.procesarPunto(Integer.parseInt(txtX.getText()), Integer.parseInt(txtY.getText()));
                        }
                    } catch (RemoteException ex) {
                        try {
                            registry.unbind("Cliente");
                        } catch (RemoteException ex1) {
                            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex1);
                        } catch (NotBoundException ex1) {
                            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                        conectado = false;
                        JOptionPane.showMessageDialog(null, "Error en la conexi√≥n..");
                        txtIp.setEnabled(true);
                        btnConectar.setEnabled(true);
                        btnDesconectar.setEnabled(false);
                    }
                } else if (b == txtIp) {
                    conectar();
                   
                }

            } catch (Exception ex) {
                Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    

class Pintador extends MouseMotionAdapter {
    
    public void mouseDragged(MouseEvent e) {
	
	Component comp = (Component) e.getSource();

        try {
             if(conectado)
            impl.procesarPunto(e.getX(), e.getY());
        } catch (RemoteException ex) {
            try {
                registry.unbind("Cliente");
            } catch (RemoteException ex1) {
                Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex1);
            } catch (NotBoundException ex1) {
                Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex1);
            }
            conectado=false;
            JOptionPane.showMessageDialog(null, "Error en la conexi√≥n..");
            txtIp.setEnabled(true);
            btnConectar.setEnabled(true);
            btnDesconectar.setEnabled(false);
        }
     
        
        
    }

        
        
      
    
}

public void pintar(int x, int y, int aSetear){
       
        Graphics2D g2=(Graphics2D)c.getGraphics();
        
        if(aSetear==1){
            g2.setColor(Color.white);
            g2.fillOval(x, y, grosor, grosor);  
        }
        else{
            g2.setColor(c.getBackground());
            g2.fillOval(x, y, grosor,grosor); 
        }
        System.out.println("Punto ("+x+","+y+") recibido desde el servidor.");
        
}
public void conectar(){
        try {
            c.getGraphics().clearRect(0,0,(int)c.getWidth(),(int)c.getHeight());
            myRegistry = LocateRegistry.getRegistry(txtIp.getText(), 1099);
            
            //Creando el objeto remoto
            if(registry==null)
                registry= LocateRegistry.createRegistry(1098);
            cRMI= new ClienteImpl(this);
            registry.rebind("Cliente", cRMI);
            
            System.out.println("Objeto cliente iniciado ...");
            System.out.println("IP: "+txtIp.getText());
            //Conexion al servidor          
            impl = (InterfazServidor) myRegistry.lookup("miPizarra");
            impl.conectar(getIPv4InetAddress());
            btnConectar.setEnabled(false);
            txtIp.setEnabled(false);
            btnDesconectar.setEnabled(true);
            conectado=true;
            System.out.println("IP enviado al servidor.");
        }catch(Exception e){
            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Red inaccesible, verifique IP del servidor o intente nuevamente");
            txtIp.grabFocus();
        }

}
    public void procesarPizarra(int[][] mat) {
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat.length; j++) {
                    if(mat[i][j]==1)
                        pintar(i, j,1);
               
            }
        }
        
    }
    private void desconectar(){
       try{
        registry.unbind("Cliente");

        impl.desconectar(cRMI);
        conectado = false;
        } catch (RemoteException ex) {
            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }
    private String getIPv4InetAddress(){

    String os = System.getProperty("os.name").toLowerCase();

    if(os.contains("nix") || os.contains("nux")) {   
        NetworkInterface ni=null;
        try {
            ni = NetworkInterface.getByName("eth0");
            Enumeration<InetAddress> ias = ni.getInetAddresses();
             InetAddress iaddress;
        do {
            iaddress = ias.nextElement();
        } while(!(iaddress instanceof Inet4Address));

        return iaddress.getHostAddress();
        } catch (Exception ex) {
            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

       
    }

        try {
            return InetAddress.getLocalHost().getHostAddress();  // for Windows and OS X it should work well
        } catch (UnknownHostException ex) {
            Logger.getLogger(PizarraCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnDesconectar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnSalir;
    private java.awt.Canvas c;
    private javax.swing.JDialog dialogoCoordenada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPopupMenu menuClick;
    private javax.swing.JMenuItem opcCoordenadas;
    private javax.swing.JMenuItem opcGrosorPincel;
    private javax.swing.JTextField txtIp;
    private javax.swing.JTextField txtX;
    private javax.swing.JTextField txtY;
    // End of variables declaration//GEN-END:variables
Registry myRegistry;
Registry registry;
InterfazServidor impl;
boolean conectado=false;
int grosor;
InterfazCliente cRMI;

}
